// Code generated by MockGen. DO NOT EDIT.
// Source: application/contact_source.go

// Package mock_application is a generated GoMock package.
package mock_application

import (
	context "context"
	reflect "reflect"
	time "time"

	gomock "github.com/golang/mock/gomock"
	application "github.com/simplycubed/contactkarma/contacts/application"
	domain "github.com/simplycubed/contactkarma/contacts/domain"
	models "github.com/simplycubed/contactkarma/contacts/gen-jobs/models"
	oauth2 "golang.org/x/oauth2"
	oauth20 "google.golang.org/api/oauth2/v1"
	people "google.golang.org/api/people/v1"
)

// MockIContactSource is a mock of IContactSource interface.
type MockIContactSource struct {
	ctrl     *gomock.Controller
	recorder *MockIContactSourceMockRecorder
}

// MockIContactSourceMockRecorder is the mock recorder for MockIContactSource.
type MockIContactSourceMockRecorder struct {
	mock *MockIContactSource
}

// NewMockIContactSource creates a new mock instance.
func NewMockIContactSource(ctrl *gomock.Controller) *MockIContactSource {
	mock := &MockIContactSource{ctrl: ctrl}
	mock.recorder = &MockIContactSourceMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockIContactSource) EXPECT() *MockIContactSourceMockRecorder {
	return m.recorder
}

// Delete mocks base method.
func (m *MockIContactSource) Delete(ctx context.Context, userId domain.UserID, sourceId domain.ContactSourceID, contactIds []domain.ContactID) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Delete", ctx, userId, sourceId, contactIds)
	ret0, _ := ret[0].(error)
	return ret0
}

// Delete indicates an expected call of Delete.
func (mr *MockIContactSourceMockRecorder) Delete(ctx, userId, sourceId, contactIds interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Delete", reflect.TypeOf((*MockIContactSource)(nil).Delete), ctx, userId, sourceId, contactIds)
}

// Puller mocks base method.
func (m *MockIContactSource) Puller(ctx context.Context, userId domain.UserID, source domain.ContactSource) application.IContactSourcePuller {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Puller", ctx, userId, source)
	ret0, _ := ret[0].(application.IContactSourcePuller)
	return ret0
}

// Puller indicates an expected call of Puller.
func (mr *MockIContactSourceMockRecorder) Puller(ctx, userId, source interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Puller", reflect.TypeOf((*MockIContactSource)(nil).Puller), ctx, userId, source)
}

// Reader mocks base method.
func (m *MockIContactSource) Reader(ctx context.Context, userId domain.UserID, sourceId domain.ContactSourceID) application.IContactSourceReader {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Reader", ctx, userId, sourceId)
	ret0, _ := ret[0].(application.IContactSourceReader)
	return ret0
}

// Reader indicates an expected call of Reader.
func (mr *MockIContactSourceMockRecorder) Reader(ctx, userId, sourceId interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Reader", reflect.TypeOf((*MockIContactSource)(nil).Reader), ctx, userId, sourceId)
}

// Remove mocks base method.
func (m *MockIContactSource) Remove(ctx context.Context, userId domain.UserID, sourceId domain.ContactSourceID, contactIds []domain.ContactID) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Remove", ctx, userId, sourceId, contactIds)
	ret0, _ := ret[0].(error)
	return ret0
}

// Remove indicates an expected call of Remove.
func (mr *MockIContactSourceMockRecorder) Remove(ctx, userId, sourceId, contactIds interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Remove", reflect.TypeOf((*MockIContactSource)(nil).Remove), ctx, userId, sourceId, contactIds)
}

// Update mocks base method.
func (m *MockIContactSource) Update(ctx context.Context, userId domain.UserID, sourceId domain.ContactSourceID, updates []domain.ContactSourceUpdate) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Update", ctx, userId, sourceId, updates)
	ret0, _ := ret[0].(error)
	return ret0
}

// Update indicates an expected call of Update.
func (mr *MockIContactSourceMockRecorder) Update(ctx, userId, sourceId, updates interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Update", reflect.TypeOf((*MockIContactSource)(nil).Update), ctx, userId, sourceId, updates)
}

// MockIContactSourcePuller is a mock of IContactSourcePuller interface.
type MockIContactSourcePuller struct {
	ctrl     *gomock.Controller
	recorder *MockIContactSourcePullerMockRecorder
}

// MockIContactSourcePullerMockRecorder is the mock recorder for MockIContactSourcePuller.
type MockIContactSourcePullerMockRecorder struct {
	mock *MockIContactSourcePuller
}

// NewMockIContactSourcePuller creates a new mock instance.
func NewMockIContactSourcePuller(ctrl *gomock.Controller) *MockIContactSourcePuller {
	mock := &MockIContactSourcePuller{ctrl: ctrl}
	mock.recorder = &MockIContactSourcePullerMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockIContactSourcePuller) EXPECT() *MockIContactSourcePullerMockRecorder {
	return m.recorder
}

// Pull mocks base method.
func (m *MockIContactSourcePuller) Pull(ctx context.Context) ([]domain.Contact, []domain.Contact, []domain.Contact, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Pull", ctx)
	ret0, _ := ret[0].([]domain.Contact)
	ret1, _ := ret[1].([]domain.Contact)
	ret2, _ := ret[2].([]domain.Contact)
	ret3, _ := ret[3].(error)
	return ret0, ret1, ret2, ret3
}

// Pull indicates an expected call of Pull.
func (mr *MockIContactSourcePullerMockRecorder) Pull(ctx interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Pull", reflect.TypeOf((*MockIContactSourcePuller)(nil).Pull), ctx)
}

// MockIContactSourceReader is a mock of IContactSourceReader interface.
type MockIContactSourceReader struct {
	ctrl     *gomock.Controller
	recorder *MockIContactSourceReaderMockRecorder
}

// MockIContactSourceReaderMockRecorder is the mock recorder for MockIContactSourceReader.
type MockIContactSourceReaderMockRecorder struct {
	mock *MockIContactSourceReader
}

// NewMockIContactSourceReader creates a new mock instance.
func NewMockIContactSourceReader(ctrl *gomock.Controller) *MockIContactSourceReader {
	mock := &MockIContactSourceReader{ctrl: ctrl}
	mock.recorder = &MockIContactSourceReaderMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockIContactSourceReader) EXPECT() *MockIContactSourceReaderMockRecorder {
	return m.recorder
}

// Read mocks base method.
func (m *MockIContactSourceReader) Read(ctx context.Context) ([]domain.Contact, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Read", ctx)
	ret0, _ := ret[0].([]domain.Contact)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Read indicates an expected call of Read.
func (mr *MockIContactSourceReaderMockRecorder) Read(ctx interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Read", reflect.TypeOf((*MockIContactSourceReader)(nil).Read), ctx)
}

// MockIContactSourceProvider is a mock of IContactSourceProvider interface.
type MockIContactSourceProvider struct {
	ctrl     *gomock.Controller
	recorder *MockIContactSourceProviderMockRecorder
}

// MockIContactSourceProviderMockRecorder is the mock recorder for MockIContactSourceProvider.
type MockIContactSourceProviderMockRecorder struct {
	mock *MockIContactSourceProvider
}

// NewMockIContactSourceProvider creates a new mock instance.
func NewMockIContactSourceProvider(ctrl *gomock.Controller) *MockIContactSourceProvider {
	mock := &MockIContactSourceProvider{ctrl: ctrl}
	mock.recorder = &MockIContactSourceProviderMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockIContactSourceProvider) EXPECT() *MockIContactSourceProviderMockRecorder {
	return m.recorder
}

// Get mocks base method.
func (m *MockIContactSourceProvider) Get(source domain.Source) application.IContactSource {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Get", source)
	ret0, _ := ret[0].(application.IContactSource)
	return ret0
}

// Get indicates an expected call of Get.
func (mr *MockIContactSourceProviderMockRecorder) Get(source interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Get", reflect.TypeOf((*MockIContactSourceProvider)(nil).Get), source)
}

// MockGoogleOAuthService is a mock of GoogleOAuthService interface.
type MockGoogleOAuthService struct {
	ctrl     *gomock.Controller
	recorder *MockGoogleOAuthServiceMockRecorder
}

// MockGoogleOAuthServiceMockRecorder is the mock recorder for MockGoogleOAuthService.
type MockGoogleOAuthServiceMockRecorder struct {
	mock *MockGoogleOAuthService
}

// NewMockGoogleOAuthService creates a new mock instance.
func NewMockGoogleOAuthService(ctrl *gomock.Controller) *MockGoogleOAuthService {
	mock := &MockGoogleOAuthService{ctrl: ctrl}
	mock.recorder = &MockGoogleOAuthServiceMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockGoogleOAuthService) EXPECT() *MockGoogleOAuthServiceMockRecorder {
	return m.recorder
}

// GetConfig mocks base method.
func (m *MockGoogleOAuthService) GetConfig() *oauth2.Config {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetConfig")
	ret0, _ := ret[0].(*oauth2.Config)
	return ret0
}

// GetConfig indicates an expected call of GetConfig.
func (mr *MockGoogleOAuthServiceMockRecorder) GetConfig() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetConfig", reflect.TypeOf((*MockGoogleOAuthService)(nil).GetConfig))
}

// GetRedirectUrl mocks base method.
func (m *MockGoogleOAuthService) GetRedirectUrl(ctx context.Context) (string, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetRedirectUrl", ctx)
	ret0, _ := ret[0].(string)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetRedirectUrl indicates an expected call of GetRedirectUrl.
func (mr *MockGoogleOAuthServiceMockRecorder) GetRedirectUrl(ctx interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetRedirectUrl", reflect.TypeOf((*MockGoogleOAuthService)(nil).GetRedirectUrl), ctx)
}

// GetToken mocks base method.
func (m *MockGoogleOAuthService) GetToken(ctx context.Context, code string) (*oauth2.Token, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetToken", ctx, code)
	ret0, _ := ret[0].(*oauth2.Token)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetToken indicates an expected call of GetToken.
func (mr *MockGoogleOAuthServiceMockRecorder) GetToken(ctx, code interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetToken", reflect.TypeOf((*MockGoogleOAuthService)(nil).GetToken), ctx, code)
}

// GetUserInfo mocks base method.
func (m *MockGoogleOAuthService) GetUserInfo(ctx context.Context, accessToken string) (*oauth20.Tokeninfo, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetUserInfo", ctx, accessToken)
	ret0, _ := ret[0].(*oauth20.Tokeninfo)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetUserInfo indicates an expected call of GetUserInfo.
func (mr *MockGoogleOAuthServiceMockRecorder) GetUserInfo(ctx, accessToken interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetUserInfo", reflect.TypeOf((*MockGoogleOAuthService)(nil).GetUserInfo), ctx, accessToken)
}

// MockPeopleService is a mock of PeopleService interface.
type MockPeopleService struct {
	ctrl     *gomock.Controller
	recorder *MockPeopleServiceMockRecorder
}

// MockPeopleServiceMockRecorder is the mock recorder for MockPeopleService.
type MockPeopleServiceMockRecorder struct {
	mock *MockPeopleService
}

// NewMockPeopleService creates a new mock instance.
func NewMockPeopleService(ctrl *gomock.Controller) *MockPeopleService {
	mock := &MockPeopleService{ctrl: ctrl}
	mock.recorder = &MockPeopleServiceMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockPeopleService) EXPECT() *MockPeopleServiceMockRecorder {
	return m.recorder
}

// BatchDelete mocks base method.
func (m *MockPeopleService) BatchDelete(personIds []string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "BatchDelete", personIds)
	ret0, _ := ret[0].(error)
	return ret0
}

// BatchDelete indicates an expected call of BatchDelete.
func (mr *MockPeopleServiceMockRecorder) BatchDelete(personIds interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "BatchDelete", reflect.TypeOf((*MockPeopleService)(nil).BatchDelete), personIds)
}

// BatchGet mocks base method.
func (m *MockPeopleService) BatchGet(personIds []string) (*people.GetPeopleResponse, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "BatchGet", personIds)
	ret0, _ := ret[0].(*people.GetPeopleResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// BatchGet indicates an expected call of BatchGet.
func (mr *MockPeopleServiceMockRecorder) BatchGet(personIds interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "BatchGet", reflect.TypeOf((*MockPeopleService)(nil).BatchGet), personIds)
}

// BatchUpdate mocks base method.
func (m *MockPeopleService) BatchUpdate(updates map[string]people.Person) (*people.BatchUpdateContactsResponse, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "BatchUpdate", updates)
	ret0, _ := ret[0].(*people.BatchUpdateContactsResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// BatchUpdate indicates an expected call of BatchUpdate.
func (mr *MockPeopleServiceMockRecorder) BatchUpdate(updates interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "BatchUpdate", reflect.TypeOf((*MockPeopleService)(nil).BatchUpdate), updates)
}

// Get mocks base method.
func (m *MockPeopleService) Get(personId string) (*people.Person, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Get", personId)
	ret0, _ := ret[0].(*people.Person)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Get indicates an expected call of Get.
func (mr *MockPeopleServiceMockRecorder) Get(personId interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Get", reflect.TypeOf((*MockPeopleService)(nil).Get), personId)
}

// List mocks base method.
func (m *MockPeopleService) List(pageToken *string) (*people.ListConnectionsResponse, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "List", pageToken)
	ret0, _ := ret[0].(*people.ListConnectionsResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// List indicates an expected call of List.
func (mr *MockPeopleServiceMockRecorder) List(pageToken interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "List", reflect.TypeOf((*MockPeopleService)(nil).List), pageToken)
}

// Update mocks base method.
func (m *MockPeopleService) Update(personId string, person *people.Person) (*people.Person, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Update", personId, person)
	ret0, _ := ret[0].(*people.Person)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Update indicates an expected call of Update.
func (mr *MockPeopleServiceMockRecorder) Update(personId, person interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Update", reflect.TypeOf((*MockPeopleService)(nil).Update), personId, person)
}

// MockPeopleServiceFactory is a mock of PeopleServiceFactory interface.
type MockPeopleServiceFactory struct {
	ctrl     *gomock.Controller
	recorder *MockPeopleServiceFactoryMockRecorder
}

// MockPeopleServiceFactoryMockRecorder is the mock recorder for MockPeopleServiceFactory.
type MockPeopleServiceFactoryMockRecorder struct {
	mock *MockPeopleServiceFactory
}

// NewMockPeopleServiceFactory creates a new mock instance.
func NewMockPeopleServiceFactory(ctrl *gomock.Controller) *MockPeopleServiceFactory {
	mock := &MockPeopleServiceFactory{ctrl: ctrl}
	mock.recorder = &MockPeopleServiceFactoryMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockPeopleServiceFactory) EXPECT() *MockPeopleServiceFactoryMockRecorder {
	return m.recorder
}

// New mocks base method.
func (m *MockPeopleServiceFactory) New(ctx context.Context, accessToken, refreshToken string, expiry time.Time) application.PeopleService {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "New", ctx, accessToken, refreshToken, expiry)
	ret0, _ := ret[0].(application.PeopleService)
	return ret0
}

// New indicates an expected call of New.
func (mr *MockPeopleServiceFactoryMockRecorder) New(ctx, accessToken, refreshToken, expiry interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "New", reflect.TypeOf((*MockPeopleServiceFactory)(nil).New), ctx, accessToken, refreshToken, expiry)
}

// MockPullContactPublisher is a mock of PullContactPublisher interface.
type MockPullContactPublisher struct {
	ctrl     *gomock.Controller
	recorder *MockPullContactPublisherMockRecorder
}

// MockPullContactPublisherMockRecorder is the mock recorder for MockPullContactPublisher.
type MockPullContactPublisherMockRecorder struct {
	mock *MockPullContactPublisher
}

// NewMockPullContactPublisher creates a new mock instance.
func NewMockPullContactPublisher(ctrl *gomock.Controller) *MockPullContactPublisher {
	mock := &MockPullContactPublisher{ctrl: ctrl}
	mock.recorder = &MockPullContactPublisherMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockPullContactPublisher) EXPECT() *MockPullContactPublisherMockRecorder {
	return m.recorder
}

// Publish mocks base method.
func (m *MockPullContactPublisher) Publish(ctx context.Context, job models.PullContactsRequest) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Publish", ctx, job)
	ret0, _ := ret[0].(error)
	return ret0
}

// Publish indicates an expected call of Publish.
func (mr *MockPullContactPublisherMockRecorder) Publish(ctx, job interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Publish", reflect.TypeOf((*MockPullContactPublisher)(nil).Publish), ctx, job)
}

// MockContactSourceDeletedPublisher is a mock of ContactSourceDeletedPublisher interface.
type MockContactSourceDeletedPublisher struct {
	ctrl     *gomock.Controller
	recorder *MockContactSourceDeletedPublisherMockRecorder
}

// MockContactSourceDeletedPublisherMockRecorder is the mock recorder for MockContactSourceDeletedPublisher.
type MockContactSourceDeletedPublisherMockRecorder struct {
	mock *MockContactSourceDeletedPublisher
}

// NewMockContactSourceDeletedPublisher creates a new mock instance.
func NewMockContactSourceDeletedPublisher(ctrl *gomock.Controller) *MockContactSourceDeletedPublisher {
	mock := &MockContactSourceDeletedPublisher{ctrl: ctrl}
	mock.recorder = &MockContactSourceDeletedPublisherMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockContactSourceDeletedPublisher) EXPECT() *MockContactSourceDeletedPublisherMockRecorder {
	return m.recorder
}

// Publish mocks base method.
func (m *MockContactSourceDeletedPublisher) Publish(ctx context.Context, job models.ContactSourceDeleted) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Publish", ctx, job)
	ret0, _ := ret[0].(error)
	return ret0
}

// Publish indicates an expected call of Publish.
func (mr *MockContactSourceDeletedPublisherMockRecorder) Publish(ctx, job interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Publish", reflect.TypeOf((*MockContactSourceDeletedPublisher)(nil).Publish), ctx, job)
}
