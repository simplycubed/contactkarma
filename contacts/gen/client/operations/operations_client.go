// Code generated by go-swagger; DO NOT EDIT.

package operations

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"fmt"

	"github.com/go-openapi/runtime"
	"github.com/go-openapi/strfmt"
)

// New creates a new operations API client.
func New(transport runtime.ClientTransport, formats strfmt.Registry) ClientService {
	return &Client{transport: transport, formats: formats}
}

/*
Client for operations API
*/
type Client struct {
	transport runtime.ClientTransport
	formats   strfmt.Registry
}

// ClientOption is the option for Client methods
type ClientOption func(*runtime.ClientOperation)

// ClientService is the interface for Client methods
type ClientService interface {
	ApplyLinkSuggestion(params *ApplyLinkSuggestionParams, opts ...ClientOption) (*ApplyLinkSuggestionOK, error)

	CreateUser(params *CreateUserParams, opts ...ClientOption) (*CreateUserOK, error)

	CreateUserContact(params *CreateUserContactParams, opts ...ClientOption) (*CreateUserContactOK, error)

	DeleteContactNote(params *DeleteContactNoteParams, opts ...ClientOption) (*DeleteContactNoteOK, error)

	DeleteContactSource(params *DeleteContactSourceParams, opts ...ClientOption) (*DeleteContactSourceOK, error)

	DeleteContactTag(params *DeleteContactTagParams, opts ...ClientOption) (*DeleteContactTagOK, error)

	DeleteUser(params *DeleteUserParams, opts ...ClientOption) (*DeleteUserOK, error)

	DeleteUserContact(params *DeleteUserContactParams, opts ...ClientOption) (*DeleteUserContactOK, error)

	GetContactNotes(params *GetContactNotesParams, opts ...ClientOption) (*GetContactNotesOK, error)

	GetContactSources(params *GetContactSourcesParams, opts ...ClientOption) (*GetContactSourcesOK, error)

	GetContactTags(params *GetContactTagsParams, opts ...ClientOption) (*GetContactTagsOK, error)

	GetLinkSuggestions(params *GetLinkSuggestionsParams, opts ...ClientOption) (*GetLinkSuggestionsOK, error)

	GetPendingFollowUps(params *GetPendingFollowUpsParams, opts ...ClientOption) (*GetPendingFollowUpsOK, error)

	GetRecentContacts(params *GetRecentContactsParams, opts ...ClientOption) (*GetRecentContactsOK, error)

	GetUnifiedContacts(params *GetUnifiedContactsParams, opts ...ClientOption) (*GetUnifiedContactsOK, error)

	GetUser(params *GetUserParams, opts ...ClientOption) (*GetUserOK, error)

	GetUserContactByID(params *GetUserContactByIDParams, opts ...ClientOption) (*GetUserContactByIDOK, error)

	InitGoogleContactSource(params *InitGoogleContactSourceParams, opts ...ClientOption) (*InitGoogleContactSourceOK, error)

	LinkGoogleContactSource(params *LinkGoogleContactSourceParams, opts ...ClientOption) (*LinkGoogleContactSourceOK, error)

	PatchContactNote(params *PatchContactNoteParams, opts ...ClientOption) (*PatchContactNoteOK, error)

	PatchContactTag(params *PatchContactTagParams, opts ...ClientOption) (*PatchContactTagOK, error)

	PostContactNote(params *PostContactNoteParams, opts ...ClientOption) (*PostContactNoteOK, error)

	PostContactTag(params *PostContactTagParams, opts ...ClientOption) (*PostContactTagOK, error)

	SearchUserContact(params *SearchUserContactParams, opts ...ClientOption) (*SearchUserContactOK, error)

	UpdateContactCategory(params *UpdateContactCategoryParams, opts ...ClientOption) (*UpdateContactCategoryOK, error)

	UpdateUser(params *UpdateUserParams, opts ...ClientOption) (*UpdateUserOK, error)

	UpdateUserContact(params *UpdateUserContactParams, opts ...ClientOption) (*UpdateUserContactOK, error)

	UploadContactsCsv(params *UploadContactsCsvParams, opts ...ClientOption) (*UploadContactsCsvOK, error)

	SetTransport(transport runtime.ClientTransport)
}

/*
  ApplyLinkSuggestion redirects user to google consent page
*/
func (a *Client) ApplyLinkSuggestion(params *ApplyLinkSuggestionParams, opts ...ClientOption) (*ApplyLinkSuggestionOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewApplyLinkSuggestionParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "apply-link-suggestion",
		Method:             "POST",
		PathPattern:        "/suggestions/{suggestion_id}/apply",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http", "https"},
		Params:             params,
		Reader:             &ApplyLinkSuggestionReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*ApplyLinkSuggestionOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for apply-link-suggestion: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
  CreateUser creates user
*/
func (a *Client) CreateUser(params *CreateUserParams, opts ...ClientOption) (*CreateUserOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewCreateUserParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "create-user",
		Method:             "POST",
		PathPattern:        "/users",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http", "https"},
		Params:             params,
		Reader:             &CreateUserReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*CreateUserOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for create-user: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
  CreateUserContact creates user s contact
*/
func (a *Client) CreateUserContact(params *CreateUserContactParams, opts ...ClientOption) (*CreateUserContactOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewCreateUserContactParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "create-user-contact",
		Method:             "POST",
		PathPattern:        "/unified",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http", "https"},
		Params:             params,
		Reader:             &CreateUserContactReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*CreateUserContactOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for create-user-contact: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
  DeleteContactNote deletes contact note
*/
func (a *Client) DeleteContactNote(params *DeleteContactNoteParams, opts ...ClientOption) (*DeleteContactNoteOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewDeleteContactNoteParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "delete-contact-note",
		Method:             "DELETE",
		PathPattern:        "/unified/{unified_id}/notes/{note_id}",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http", "https"},
		Params:             params,
		Reader:             &DeleteContactNoteReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*DeleteContactNoteOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for delete-contact-note: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
  DeleteContactSource deletes contact source by id
*/
func (a *Client) DeleteContactSource(params *DeleteContactSourceParams, opts ...ClientOption) (*DeleteContactSourceOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewDeleteContactSourceParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "delete-contact-source",
		Method:             "DELETE",
		PathPattern:        "/contacts/sources/{source_id}",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http", "https"},
		Params:             params,
		Reader:             &DeleteContactSourceReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*DeleteContactSourceOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for delete-contact-source: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
  DeleteContactTag deletes contact tag
*/
func (a *Client) DeleteContactTag(params *DeleteContactTagParams, opts ...ClientOption) (*DeleteContactTagOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewDeleteContactTagParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "delete-contact-tag",
		Method:             "DELETE",
		PathPattern:        "/unified/{unified_id}/tags/{tag_id}",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http", "https"},
		Params:             params,
		Reader:             &DeleteContactTagReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*DeleteContactTagOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for delete-contact-tag: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
  DeleteUser deletes user
*/
func (a *Client) DeleteUser(params *DeleteUserParams, opts ...ClientOption) (*DeleteUserOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewDeleteUserParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "delete-user",
		Method:             "DELETE",
		PathPattern:        "/users/{user_id}",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http", "https"},
		Params:             params,
		Reader:             &DeleteUserReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*DeleteUserOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for delete-user: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
  DeleteUserContact deletes user s contact by id
*/
func (a *Client) DeleteUserContact(params *DeleteUserContactParams, opts ...ClientOption) (*DeleteUserContactOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewDeleteUserContactParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "delete-user-contact",
		Method:             "DELETE",
		PathPattern:        "/unified/{unified_id}",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http", "https"},
		Params:             params,
		Reader:             &DeleteUserContactReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*DeleteUserContactOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for delete-user-contact: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
  GetContactNotes gets contact notes
*/
func (a *Client) GetContactNotes(params *GetContactNotesParams, opts ...ClientOption) (*GetContactNotesOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetContactNotesParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "get-contact-notes",
		Method:             "GET",
		PathPattern:        "/unified/{unified_id}/notes",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http", "https"},
		Params:             params,
		Reader:             &GetContactNotesReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*GetContactNotesOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for get-contact-notes: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
  GetContactSources gets user s contact source list
*/
func (a *Client) GetContactSources(params *GetContactSourcesParams, opts ...ClientOption) (*GetContactSourcesOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetContactSourcesParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "get-contact-sources",
		Method:             "GET",
		PathPattern:        "/contacts/sources",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http", "https"},
		Params:             params,
		Reader:             &GetContactSourcesReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*GetContactSourcesOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for get-contact-sources: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
  GetContactTags gets contact tags
*/
func (a *Client) GetContactTags(params *GetContactTagsParams, opts ...ClientOption) (*GetContactTagsOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetContactTagsParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "get-contact-tags",
		Method:             "GET",
		PathPattern:        "/unified/{unified_id}/tags",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http", "https"},
		Params:             params,
		Reader:             &GetContactTagsReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*GetContactTagsOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for get-contact-tags: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
  GetLinkSuggestions gets list of contact link suggestions to remove duplicates
*/
func (a *Client) GetLinkSuggestions(params *GetLinkSuggestionsParams, opts ...ClientOption) (*GetLinkSuggestionsOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetLinkSuggestionsParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "get-link-suggestions",
		Method:             "GET",
		PathPattern:        "/suggestions",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http", "https"},
		Params:             params,
		Reader:             &GetLinkSuggestionsReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*GetLinkSuggestionsOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for get-link-suggestions: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
  GetPendingFollowUps gets pending follow ups
*/
func (a *Client) GetPendingFollowUps(params *GetPendingFollowUpsParams, opts ...ClientOption) (*GetPendingFollowUpsOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetPendingFollowUpsParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "get-pending-follow-ups",
		Method:             "GET",
		PathPattern:        "/pending",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http", "https"},
		Params:             params,
		Reader:             &GetPendingFollowUpsReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*GetPendingFollowUpsOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for get-pending-follow-ups: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
  GetRecentContacts gets pending follow ups
*/
func (a *Client) GetRecentContacts(params *GetRecentContactsParams, opts ...ClientOption) (*GetRecentContactsOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetRecentContactsParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "get-recent-contacts",
		Method:             "GET",
		PathPattern:        "/recent",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http", "https"},
		Params:             params,
		Reader:             &GetRecentContactsReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*GetRecentContactsOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for get-recent-contacts: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
  GetUnifiedContacts gets unified list of contacts
*/
func (a *Client) GetUnifiedContacts(params *GetUnifiedContactsParams, opts ...ClientOption) (*GetUnifiedContactsOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetUnifiedContactsParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "get-unified-contacts",
		Method:             "GET",
		PathPattern:        "/unified",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http", "https"},
		Params:             params,
		Reader:             &GetUnifiedContactsReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*GetUnifiedContactsOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for get-unified-contacts: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
  GetUser gets user
*/
func (a *Client) GetUser(params *GetUserParams, opts ...ClientOption) (*GetUserOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetUserParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "get-user",
		Method:             "GET",
		PathPattern:        "/users/{user_id}",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http", "https"},
		Params:             params,
		Reader:             &GetUserReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*GetUserOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for get-user: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
  GetUserContactByID gets user s contact by id
*/
func (a *Client) GetUserContactByID(params *GetUserContactByIDParams, opts ...ClientOption) (*GetUserContactByIDOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetUserContactByIDParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "get-user-contact-by-id",
		Method:             "GET",
		PathPattern:        "/unified/{unified_id}",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http", "https"},
		Params:             params,
		Reader:             &GetUserContactByIDReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*GetUserContactByIDOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for get-user-contact-by-id: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
  InitGoogleContactSource returns redirect url
*/
func (a *Client) InitGoogleContactSource(params *InitGoogleContactSourceParams, opts ...ClientOption) (*InitGoogleContactSourceOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewInitGoogleContactSourceParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "init-google-contact-source",
		Method:             "GET",
		PathPattern:        "/contacts/sources/google/init",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http", "https"},
		Params:             params,
		Reader:             &InitGoogleContactSourceReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*InitGoogleContactSourceOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for init-google-contact-source: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
  LinkGoogleContactSource redirects user to google consent page
*/
func (a *Client) LinkGoogleContactSource(params *LinkGoogleContactSourceParams, opts ...ClientOption) (*LinkGoogleContactSourceOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewLinkGoogleContactSourceParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "link-google-contact-source",
		Method:             "POST",
		PathPattern:        "/contacts/sources/google/link",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http", "https"},
		Params:             params,
		Reader:             &LinkGoogleContactSourceReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*LinkGoogleContactSourceOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for link-google-contact-source: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
  PatchContactNote patches contact note
*/
func (a *Client) PatchContactNote(params *PatchContactNoteParams, opts ...ClientOption) (*PatchContactNoteOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewPatchContactNoteParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "patch-contact-note",
		Method:             "PATCH",
		PathPattern:        "/unified/{unified_id}/notes/{note_id}",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http", "https"},
		Params:             params,
		Reader:             &PatchContactNoteReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*PatchContactNoteOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for patch-contact-note: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
  PatchContactTag patches contact tag
*/
func (a *Client) PatchContactTag(params *PatchContactTagParams, opts ...ClientOption) (*PatchContactTagOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewPatchContactTagParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "patch-contact-tag",
		Method:             "PATCH",
		PathPattern:        "/unified/{unified_id}/tags/{tag_id}",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http", "https"},
		Params:             params,
		Reader:             &PatchContactTagReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*PatchContactTagOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for patch-contact-tag: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
  PostContactNote posts contact note
*/
func (a *Client) PostContactNote(params *PostContactNoteParams, opts ...ClientOption) (*PostContactNoteOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewPostContactNoteParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "post-contact-note",
		Method:             "POST",
		PathPattern:        "/unified/{unified_id}/notes",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http", "https"},
		Params:             params,
		Reader:             &PostContactNoteReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*PostContactNoteOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for post-contact-note: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
  PostContactTag posts contact tag
*/
func (a *Client) PostContactTag(params *PostContactTagParams, opts ...ClientOption) (*PostContactTagOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewPostContactTagParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "post-contact-tag",
		Method:             "POST",
		PathPattern:        "/unified/{unified_id}/tags",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http", "https"},
		Params:             params,
		Reader:             &PostContactTagReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*PostContactTagOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for post-contact-tag: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
  SearchUserContact searches user s contact
*/
func (a *Client) SearchUserContact(params *SearchUserContactParams, opts ...ClientOption) (*SearchUserContactOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewSearchUserContactParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "search-user-contact",
		Method:             "POST",
		PathPattern:        "/search",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http", "https"},
		Params:             params,
		Reader:             &SearchUserContactReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*SearchUserContactOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for search-user-contact: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
  UpdateContactCategory updates category
*/
func (a *Client) UpdateContactCategory(params *UpdateContactCategoryParams, opts ...ClientOption) (*UpdateContactCategoryOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewUpdateContactCategoryParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "update-contact-category",
		Method:             "PATCH",
		PathPattern:        "/unified/{unified_id}/category",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http", "https"},
		Params:             params,
		Reader:             &UpdateContactCategoryReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*UpdateContactCategoryOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for update-contact-category: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
  UpdateUser updates user
*/
func (a *Client) UpdateUser(params *UpdateUserParams, opts ...ClientOption) (*UpdateUserOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewUpdateUserParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "update-user",
		Method:             "PATCH",
		PathPattern:        "/users",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http", "https"},
		Params:             params,
		Reader:             &UpdateUserReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*UpdateUserOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for update-user: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
  UpdateUserContact updates user s contact by id
*/
func (a *Client) UpdateUserContact(params *UpdateUserContactParams, opts ...ClientOption) (*UpdateUserContactOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewUpdateUserContactParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "update-user-contact",
		Method:             "PATCH",
		PathPattern:        "/unified/{unified_id}",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http", "https"},
		Params:             params,
		Reader:             &UpdateUserContactReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*UpdateUserContactOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for update-user-contact: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
  UploadContactsCsv uploads contacts csv
*/
func (a *Client) UploadContactsCsv(params *UploadContactsCsvParams, opts ...ClientOption) (*UploadContactsCsvOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewUploadContactsCsvParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "upload-contacts-csv",
		Method:             "POST",
		PathPattern:        "/contacts/upload-csv",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"multipart/form-data"},
		Schemes:            []string{"http", "https"},
		Params:             params,
		Reader:             &UploadContactsCsvReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*UploadContactsCsvOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for upload-contacts-csv: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

// SetTransport changes the transport on the client
func (a *Client) SetTransport(transport runtime.ClientTransport) {
	a.transport = transport
}
