// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"
	"encoding/json"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/validate"
)

// ContactCategory contact category
//
// swagger:model ContactCategory
type ContactCategory string

func NewContactCategory(value ContactCategory) *ContactCategory {
	return &value
}

// Pointer returns a pointer to a freshly-allocated ContactCategory.
func (m ContactCategory) Pointer() *ContactCategory {
	return &m
}

const (

	// ContactCategoryA captures enum value "A"
	ContactCategoryA ContactCategory = "A"

	// ContactCategoryB captures enum value "B"
	ContactCategoryB ContactCategory = "B"

	// ContactCategoryC captures enum value "C"
	ContactCategoryC ContactCategory = "C"

	// ContactCategoryD captures enum value "D"
	ContactCategoryD ContactCategory = "D"
)

// for schema
var contactCategoryEnum []interface{}

func init() {
	var res []ContactCategory
	if err := json.Unmarshal([]byte(`["A","B","C","D"]`), &res); err != nil {
		panic(err)
	}
	for _, v := range res {
		contactCategoryEnum = append(contactCategoryEnum, v)
	}
}

func (m ContactCategory) validateContactCategoryEnum(path, location string, value ContactCategory) error {
	if err := validate.EnumCase(path, location, value, contactCategoryEnum, true); err != nil {
		return err
	}
	return nil
}

// Validate validates this contact category
func (m ContactCategory) Validate(formats strfmt.Registry) error {
	var res []error

	// value enum
	if err := m.validateContactCategoryEnum("", "body", m); err != nil {
		return err
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

// ContextValidate validates this contact category based on context it is used
func (m ContactCategory) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	return nil
}
