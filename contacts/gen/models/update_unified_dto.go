// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"
	"strconv"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
	"github.com/go-openapi/validate"
)

// UpdateUnifiedDto UpdateUnifiedDto
//
// swagger:model UpdateUnifiedDto
type UpdateUnifiedDto struct {

	// addresses
	Addresses []*Address `json:"addresses"`

	// birthdays
	Birthdays []*Birthday `json:"birthdays"`

	// display name
	DisplayName string `json:"display_name,omitempty"`

	// email addresses
	EmailAddresses []*EmailAddress `json:"email_addresses"`

	// genders
	Genders []*Gender `json:"genders"`

	// last contact
	// Format: date-time
	LastContact strfmt.DateTime `json:"last_contact,omitempty"`

	// names
	Names []*UserNames `json:"names"`

	// next contact
	// Format: date-time
	NextContact strfmt.DateTime `json:"next_contact,omitempty"`

	// nicknames
	Nicknames []*Nickname `json:"nicknames"`

	// occupations
	Occupations []*Occupation `json:"occupations"`

	// organizations
	Organizations []*Organization `json:"organizations"`

	// phone numbers
	PhoneNumbers []*PhoneNumber `json:"phone_numbers"`

	// photos
	Photos []*Photo `json:"photos"`

	// relations
	Relations []*Relation `json:"relations"`

	// score
	Score int64 `json:"score,omitempty"`

	// urls
	Urls []*URL `json:"urls"`
}

// Validate validates this update unified dto
func (m *UpdateUnifiedDto) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateAddresses(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateBirthdays(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateEmailAddresses(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateGenders(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateLastContact(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateNames(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateNextContact(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateNicknames(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateOccupations(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateOrganizations(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validatePhoneNumbers(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validatePhotos(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateRelations(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateUrls(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *UpdateUnifiedDto) validateAddresses(formats strfmt.Registry) error {
	if swag.IsZero(m.Addresses) { // not required
		return nil
	}

	for i := 0; i < len(m.Addresses); i++ {
		if swag.IsZero(m.Addresses[i]) { // not required
			continue
		}

		if m.Addresses[i] != nil {
			if err := m.Addresses[i].Validate(formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("addresses" + "." + strconv.Itoa(i))
				} else if ce, ok := err.(*errors.CompositeError); ok {
					return ce.ValidateName("addresses" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

func (m *UpdateUnifiedDto) validateBirthdays(formats strfmt.Registry) error {
	if swag.IsZero(m.Birthdays) { // not required
		return nil
	}

	for i := 0; i < len(m.Birthdays); i++ {
		if swag.IsZero(m.Birthdays[i]) { // not required
			continue
		}

		if m.Birthdays[i] != nil {
			if err := m.Birthdays[i].Validate(formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("birthdays" + "." + strconv.Itoa(i))
				} else if ce, ok := err.(*errors.CompositeError); ok {
					return ce.ValidateName("birthdays" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

func (m *UpdateUnifiedDto) validateEmailAddresses(formats strfmt.Registry) error {
	if swag.IsZero(m.EmailAddresses) { // not required
		return nil
	}

	for i := 0; i < len(m.EmailAddresses); i++ {
		if swag.IsZero(m.EmailAddresses[i]) { // not required
			continue
		}

		if m.EmailAddresses[i] != nil {
			if err := m.EmailAddresses[i].Validate(formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("email_addresses" + "." + strconv.Itoa(i))
				} else if ce, ok := err.(*errors.CompositeError); ok {
					return ce.ValidateName("email_addresses" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

func (m *UpdateUnifiedDto) validateGenders(formats strfmt.Registry) error {
	if swag.IsZero(m.Genders) { // not required
		return nil
	}

	for i := 0; i < len(m.Genders); i++ {
		if swag.IsZero(m.Genders[i]) { // not required
			continue
		}

		if m.Genders[i] != nil {
			if err := m.Genders[i].Validate(formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("genders" + "." + strconv.Itoa(i))
				} else if ce, ok := err.(*errors.CompositeError); ok {
					return ce.ValidateName("genders" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

func (m *UpdateUnifiedDto) validateLastContact(formats strfmt.Registry) error {
	if swag.IsZero(m.LastContact) { // not required
		return nil
	}

	if err := validate.FormatOf("last_contact", "body", "date-time", m.LastContact.String(), formats); err != nil {
		return err
	}

	return nil
}

func (m *UpdateUnifiedDto) validateNames(formats strfmt.Registry) error {
	if swag.IsZero(m.Names) { // not required
		return nil
	}

	for i := 0; i < len(m.Names); i++ {
		if swag.IsZero(m.Names[i]) { // not required
			continue
		}

		if m.Names[i] != nil {
			if err := m.Names[i].Validate(formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("names" + "." + strconv.Itoa(i))
				} else if ce, ok := err.(*errors.CompositeError); ok {
					return ce.ValidateName("names" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

func (m *UpdateUnifiedDto) validateNextContact(formats strfmt.Registry) error {
	if swag.IsZero(m.NextContact) { // not required
		return nil
	}

	if err := validate.FormatOf("next_contact", "body", "date-time", m.NextContact.String(), formats); err != nil {
		return err
	}

	return nil
}

func (m *UpdateUnifiedDto) validateNicknames(formats strfmt.Registry) error {
	if swag.IsZero(m.Nicknames) { // not required
		return nil
	}

	for i := 0; i < len(m.Nicknames); i++ {
		if swag.IsZero(m.Nicknames[i]) { // not required
			continue
		}

		if m.Nicknames[i] != nil {
			if err := m.Nicknames[i].Validate(formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("nicknames" + "." + strconv.Itoa(i))
				} else if ce, ok := err.(*errors.CompositeError); ok {
					return ce.ValidateName("nicknames" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

func (m *UpdateUnifiedDto) validateOccupations(formats strfmt.Registry) error {
	if swag.IsZero(m.Occupations) { // not required
		return nil
	}

	for i := 0; i < len(m.Occupations); i++ {
		if swag.IsZero(m.Occupations[i]) { // not required
			continue
		}

		if m.Occupations[i] != nil {
			if err := m.Occupations[i].Validate(formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("occupations" + "." + strconv.Itoa(i))
				} else if ce, ok := err.(*errors.CompositeError); ok {
					return ce.ValidateName("occupations" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

func (m *UpdateUnifiedDto) validateOrganizations(formats strfmt.Registry) error {
	if swag.IsZero(m.Organizations) { // not required
		return nil
	}

	for i := 0; i < len(m.Organizations); i++ {
		if swag.IsZero(m.Organizations[i]) { // not required
			continue
		}

		if m.Organizations[i] != nil {
			if err := m.Organizations[i].Validate(formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("organizations" + "." + strconv.Itoa(i))
				} else if ce, ok := err.(*errors.CompositeError); ok {
					return ce.ValidateName("organizations" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

func (m *UpdateUnifiedDto) validatePhoneNumbers(formats strfmt.Registry) error {
	if swag.IsZero(m.PhoneNumbers) { // not required
		return nil
	}

	for i := 0; i < len(m.PhoneNumbers); i++ {
		if swag.IsZero(m.PhoneNumbers[i]) { // not required
			continue
		}

		if m.PhoneNumbers[i] != nil {
			if err := m.PhoneNumbers[i].Validate(formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("phone_numbers" + "." + strconv.Itoa(i))
				} else if ce, ok := err.(*errors.CompositeError); ok {
					return ce.ValidateName("phone_numbers" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

func (m *UpdateUnifiedDto) validatePhotos(formats strfmt.Registry) error {
	if swag.IsZero(m.Photos) { // not required
		return nil
	}

	for i := 0; i < len(m.Photos); i++ {
		if swag.IsZero(m.Photos[i]) { // not required
			continue
		}

		if m.Photos[i] != nil {
			if err := m.Photos[i].Validate(formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("photos" + "." + strconv.Itoa(i))
				} else if ce, ok := err.(*errors.CompositeError); ok {
					return ce.ValidateName("photos" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

func (m *UpdateUnifiedDto) validateRelations(formats strfmt.Registry) error {
	if swag.IsZero(m.Relations) { // not required
		return nil
	}

	for i := 0; i < len(m.Relations); i++ {
		if swag.IsZero(m.Relations[i]) { // not required
			continue
		}

		if m.Relations[i] != nil {
			if err := m.Relations[i].Validate(formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("relations" + "." + strconv.Itoa(i))
				} else if ce, ok := err.(*errors.CompositeError); ok {
					return ce.ValidateName("relations" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

func (m *UpdateUnifiedDto) validateUrls(formats strfmt.Registry) error {
	if swag.IsZero(m.Urls) { // not required
		return nil
	}

	for i := 0; i < len(m.Urls); i++ {
		if swag.IsZero(m.Urls[i]) { // not required
			continue
		}

		if m.Urls[i] != nil {
			if err := m.Urls[i].Validate(formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("urls" + "." + strconv.Itoa(i))
				} else if ce, ok := err.(*errors.CompositeError); ok {
					return ce.ValidateName("urls" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

// ContextValidate validate this update unified dto based on the context it is used
func (m *UpdateUnifiedDto) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	var res []error

	if err := m.contextValidateAddresses(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateBirthdays(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateEmailAddresses(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateGenders(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateNames(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateNicknames(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateOccupations(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateOrganizations(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidatePhoneNumbers(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidatePhotos(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateRelations(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateUrls(ctx, formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *UpdateUnifiedDto) contextValidateAddresses(ctx context.Context, formats strfmt.Registry) error {

	for i := 0; i < len(m.Addresses); i++ {

		if m.Addresses[i] != nil {
			if err := m.Addresses[i].ContextValidate(ctx, formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("addresses" + "." + strconv.Itoa(i))
				} else if ce, ok := err.(*errors.CompositeError); ok {
					return ce.ValidateName("addresses" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

func (m *UpdateUnifiedDto) contextValidateBirthdays(ctx context.Context, formats strfmt.Registry) error {

	for i := 0; i < len(m.Birthdays); i++ {

		if m.Birthdays[i] != nil {
			if err := m.Birthdays[i].ContextValidate(ctx, formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("birthdays" + "." + strconv.Itoa(i))
				} else if ce, ok := err.(*errors.CompositeError); ok {
					return ce.ValidateName("birthdays" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

func (m *UpdateUnifiedDto) contextValidateEmailAddresses(ctx context.Context, formats strfmt.Registry) error {

	for i := 0; i < len(m.EmailAddresses); i++ {

		if m.EmailAddresses[i] != nil {
			if err := m.EmailAddresses[i].ContextValidate(ctx, formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("email_addresses" + "." + strconv.Itoa(i))
				} else if ce, ok := err.(*errors.CompositeError); ok {
					return ce.ValidateName("email_addresses" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

func (m *UpdateUnifiedDto) contextValidateGenders(ctx context.Context, formats strfmt.Registry) error {

	for i := 0; i < len(m.Genders); i++ {

		if m.Genders[i] != nil {
			if err := m.Genders[i].ContextValidate(ctx, formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("genders" + "." + strconv.Itoa(i))
				} else if ce, ok := err.(*errors.CompositeError); ok {
					return ce.ValidateName("genders" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

func (m *UpdateUnifiedDto) contextValidateNames(ctx context.Context, formats strfmt.Registry) error {

	for i := 0; i < len(m.Names); i++ {

		if m.Names[i] != nil {
			if err := m.Names[i].ContextValidate(ctx, formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("names" + "." + strconv.Itoa(i))
				} else if ce, ok := err.(*errors.CompositeError); ok {
					return ce.ValidateName("names" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

func (m *UpdateUnifiedDto) contextValidateNicknames(ctx context.Context, formats strfmt.Registry) error {

	for i := 0; i < len(m.Nicknames); i++ {

		if m.Nicknames[i] != nil {
			if err := m.Nicknames[i].ContextValidate(ctx, formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("nicknames" + "." + strconv.Itoa(i))
				} else if ce, ok := err.(*errors.CompositeError); ok {
					return ce.ValidateName("nicknames" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

func (m *UpdateUnifiedDto) contextValidateOccupations(ctx context.Context, formats strfmt.Registry) error {

	for i := 0; i < len(m.Occupations); i++ {

		if m.Occupations[i] != nil {
			if err := m.Occupations[i].ContextValidate(ctx, formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("occupations" + "." + strconv.Itoa(i))
				} else if ce, ok := err.(*errors.CompositeError); ok {
					return ce.ValidateName("occupations" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

func (m *UpdateUnifiedDto) contextValidateOrganizations(ctx context.Context, formats strfmt.Registry) error {

	for i := 0; i < len(m.Organizations); i++ {

		if m.Organizations[i] != nil {
			if err := m.Organizations[i].ContextValidate(ctx, formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("organizations" + "." + strconv.Itoa(i))
				} else if ce, ok := err.(*errors.CompositeError); ok {
					return ce.ValidateName("organizations" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

func (m *UpdateUnifiedDto) contextValidatePhoneNumbers(ctx context.Context, formats strfmt.Registry) error {

	for i := 0; i < len(m.PhoneNumbers); i++ {

		if m.PhoneNumbers[i] != nil {
			if err := m.PhoneNumbers[i].ContextValidate(ctx, formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("phone_numbers" + "." + strconv.Itoa(i))
				} else if ce, ok := err.(*errors.CompositeError); ok {
					return ce.ValidateName("phone_numbers" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

func (m *UpdateUnifiedDto) contextValidatePhotos(ctx context.Context, formats strfmt.Registry) error {

	for i := 0; i < len(m.Photos); i++ {

		if m.Photos[i] != nil {
			if err := m.Photos[i].ContextValidate(ctx, formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("photos" + "." + strconv.Itoa(i))
				} else if ce, ok := err.(*errors.CompositeError); ok {
					return ce.ValidateName("photos" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

func (m *UpdateUnifiedDto) contextValidateRelations(ctx context.Context, formats strfmt.Registry) error {

	for i := 0; i < len(m.Relations); i++ {

		if m.Relations[i] != nil {
			if err := m.Relations[i].ContextValidate(ctx, formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("relations" + "." + strconv.Itoa(i))
				} else if ce, ok := err.(*errors.CompositeError); ok {
					return ce.ValidateName("relations" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

func (m *UpdateUnifiedDto) contextValidateUrls(ctx context.Context, formats strfmt.Registry) error {

	for i := 0; i < len(m.Urls); i++ {

		if m.Urls[i] != nil {
			if err := m.Urls[i].ContextValidate(ctx, formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("urls" + "." + strconv.Itoa(i))
				} else if ce, ok := err.(*errors.CompositeError); ok {
					return ce.ValidateName("urls" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

// MarshalBinary interface implementation
func (m *UpdateUnifiedDto) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *UpdateUnifiedDto) UnmarshalBinary(b []byte) error {
	var res UpdateUnifiedDto
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
