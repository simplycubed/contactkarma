// Code generated by go-swagger; DO NOT EDIT.

package operations

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the generate command

import (
	"net/http"

	"github.com/go-openapi/runtime/middleware"
)

// GetPendingFollowUpsHandlerFunc turns a function with the right signature into a get pending follow ups handler
type GetPendingFollowUpsHandlerFunc func(GetPendingFollowUpsParams) middleware.Responder

// Handle executing the request and returning a response
func (fn GetPendingFollowUpsHandlerFunc) Handle(params GetPendingFollowUpsParams) middleware.Responder {
	return fn(params)
}

// GetPendingFollowUpsHandler interface for that can handle valid get pending follow ups params
type GetPendingFollowUpsHandler interface {
	Handle(GetPendingFollowUpsParams) middleware.Responder
}

// NewGetPendingFollowUps creates a new http.Handler for the get pending follow ups operation
func NewGetPendingFollowUps(ctx *middleware.Context, handler GetPendingFollowUpsHandler) *GetPendingFollowUps {
	return &GetPendingFollowUps{Context: ctx, Handler: handler}
}

/* GetPendingFollowUps swagger:route GET /pending getPendingFollowUps

get pending follow ups

*/
type GetPendingFollowUps struct {
	Context *middleware.Context
	Handler GetPendingFollowUpsHandler
}

func (o *GetPendingFollowUps) ServeHTTP(rw http.ResponseWriter, r *http.Request) {
	route, rCtx, _ := o.Context.RouteInfo(r)
	if rCtx != nil {
		*r = *rCtx
	}
	var Params = NewGetPendingFollowUpsParams()
	if err := o.Context.BindValidRequest(r, route, &Params); err != nil { // bind params
		o.Context.Respond(rw, r, route.Produces, route, err)
		return
	}

	res := o.Handler.Handle(Params) // actually handle the request
	o.Context.Respond(rw, r, route.Produces, route, res)

}
