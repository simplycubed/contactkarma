// Code generated by go-swagger; DO NOT EDIT.

package operations

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the generate command

import (
	"net/http"

	"github.com/go-openapi/runtime/middleware"
)

// CreateUserContactHandlerFunc turns a function with the right signature into a create user contact handler
type CreateUserContactHandlerFunc func(CreateUserContactParams) middleware.Responder

// Handle executing the request and returning a response
func (fn CreateUserContactHandlerFunc) Handle(params CreateUserContactParams) middleware.Responder {
	return fn(params)
}

// CreateUserContactHandler interface for that can handle valid create user contact params
type CreateUserContactHandler interface {
	Handle(CreateUserContactParams) middleware.Responder
}

// NewCreateUserContact creates a new http.Handler for the create user contact operation
func NewCreateUserContact(ctx *middleware.Context, handler CreateUserContactHandler) *CreateUserContact {
	return &CreateUserContact{Context: ctx, Handler: handler}
}

/* CreateUserContact swagger:route POST /unified createUserContact

create user's contact

*/
type CreateUserContact struct {
	Context *middleware.Context
	Handler CreateUserContactHandler
}

func (o *CreateUserContact) ServeHTTP(rw http.ResponseWriter, r *http.Request) {
	route, rCtx, _ := o.Context.RouteInfo(r)
	if rCtx != nil {
		*r = *rCtx
	}
	var Params = NewCreateUserContactParams()
	if err := o.Context.BindValidRequest(r, route, &Params); err != nil { // bind params
		o.Context.Respond(rw, r, route.Produces, route, err)
		return
	}

	res := o.Handler.Handle(Params) // actually handle the request
	o.Context.Respond(rw, r, route.Produces, route, res)

}
