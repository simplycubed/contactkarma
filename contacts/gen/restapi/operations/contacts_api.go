// Code generated by go-swagger; DO NOT EDIT.

package operations

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"fmt"
	"net/http"
	"strings"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/loads"
	"github.com/go-openapi/runtime"
	"github.com/go-openapi/runtime/middleware"
	"github.com/go-openapi/runtime/security"
	"github.com/go-openapi/spec"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
)

// NewContactsAPI creates a new Contacts instance
func NewContactsAPI(spec *loads.Document) *ContactsAPI {
	return &ContactsAPI{
		handlers:            make(map[string]map[string]http.Handler),
		formats:             strfmt.Default,
		defaultConsumes:     "application/json",
		defaultProduces:     "application/json",
		customConsumers:     make(map[string]runtime.Consumer),
		customProducers:     make(map[string]runtime.Producer),
		PreServerShutdown:   func() {},
		ServerShutdown:      func() {},
		spec:                spec,
		useSwaggerUI:        false,
		ServeError:          errors.ServeError,
		BasicAuthenticator:  security.BasicAuth,
		APIKeyAuthenticator: security.APIKeyAuth,
		BearerAuthenticator: security.BearerAuth,

		JSONConsumer:          runtime.JSONConsumer(),
		MultipartformConsumer: runtime.DiscardConsumer,

		JSONProducer: runtime.JSONProducer(),

		ApplyLinkSuggestionHandler: ApplyLinkSuggestionHandlerFunc(func(params ApplyLinkSuggestionParams) middleware.Responder {
			return middleware.NotImplemented("operation ApplyLinkSuggestion has not yet been implemented")
		}),
		CreateUserHandler: CreateUserHandlerFunc(func(params CreateUserParams) middleware.Responder {
			return middleware.NotImplemented("operation CreateUser has not yet been implemented")
		}),
		CreateUserContactHandler: CreateUserContactHandlerFunc(func(params CreateUserContactParams) middleware.Responder {
			return middleware.NotImplemented("operation CreateUserContact has not yet been implemented")
		}),
		DeleteContactNoteHandler: DeleteContactNoteHandlerFunc(func(params DeleteContactNoteParams) middleware.Responder {
			return middleware.NotImplemented("operation DeleteContactNote has not yet been implemented")
		}),
		DeleteContactSourceHandler: DeleteContactSourceHandlerFunc(func(params DeleteContactSourceParams) middleware.Responder {
			return middleware.NotImplemented("operation DeleteContactSource has not yet been implemented")
		}),
		DeleteContactTagHandler: DeleteContactTagHandlerFunc(func(params DeleteContactTagParams) middleware.Responder {
			return middleware.NotImplemented("operation DeleteContactTag has not yet been implemented")
		}),
		DeleteUserHandler: DeleteUserHandlerFunc(func(params DeleteUserParams) middleware.Responder {
			return middleware.NotImplemented("operation DeleteUser has not yet been implemented")
		}),
		DeleteUserContactHandler: DeleteUserContactHandlerFunc(func(params DeleteUserContactParams) middleware.Responder {
			return middleware.NotImplemented("operation DeleteUserContact has not yet been implemented")
		}),
		GetContactNotesHandler: GetContactNotesHandlerFunc(func(params GetContactNotesParams) middleware.Responder {
			return middleware.NotImplemented("operation GetContactNotes has not yet been implemented")
		}),
		GetContactSourcesHandler: GetContactSourcesHandlerFunc(func(params GetContactSourcesParams) middleware.Responder {
			return middleware.NotImplemented("operation GetContactSources has not yet been implemented")
		}),
		GetContactTagsHandler: GetContactTagsHandlerFunc(func(params GetContactTagsParams) middleware.Responder {
			return middleware.NotImplemented("operation GetContactTags has not yet been implemented")
		}),
		GetLinkSuggestionsHandler: GetLinkSuggestionsHandlerFunc(func(params GetLinkSuggestionsParams) middleware.Responder {
			return middleware.NotImplemented("operation GetLinkSuggestions has not yet been implemented")
		}),
		GetPendingFollowUpsHandler: GetPendingFollowUpsHandlerFunc(func(params GetPendingFollowUpsParams) middleware.Responder {
			return middleware.NotImplemented("operation GetPendingFollowUps has not yet been implemented")
		}),
		GetRecentContactsHandler: GetRecentContactsHandlerFunc(func(params GetRecentContactsParams) middleware.Responder {
			return middleware.NotImplemented("operation GetRecentContacts has not yet been implemented")
		}),
		GetUnifiedContactsHandler: GetUnifiedContactsHandlerFunc(func(params GetUnifiedContactsParams) middleware.Responder {
			return middleware.NotImplemented("operation GetUnifiedContacts has not yet been implemented")
		}),
		GetUserHandler: GetUserHandlerFunc(func(params GetUserParams) middleware.Responder {
			return middleware.NotImplemented("operation GetUser has not yet been implemented")
		}),
		GetUserContactByIDHandler: GetUserContactByIDHandlerFunc(func(params GetUserContactByIDParams) middleware.Responder {
			return middleware.NotImplemented("operation GetUserContactByID has not yet been implemented")
		}),
		InitGoogleContactSourceHandler: InitGoogleContactSourceHandlerFunc(func(params InitGoogleContactSourceParams) middleware.Responder {
			return middleware.NotImplemented("operation InitGoogleContactSource has not yet been implemented")
		}),
		LinkGoogleContactSourceHandler: LinkGoogleContactSourceHandlerFunc(func(params LinkGoogleContactSourceParams) middleware.Responder {
			return middleware.NotImplemented("operation LinkGoogleContactSource has not yet been implemented")
		}),
		PatchContactNoteHandler: PatchContactNoteHandlerFunc(func(params PatchContactNoteParams) middleware.Responder {
			return middleware.NotImplemented("operation PatchContactNote has not yet been implemented")
		}),
		PatchContactTagHandler: PatchContactTagHandlerFunc(func(params PatchContactTagParams) middleware.Responder {
			return middleware.NotImplemented("operation PatchContactTag has not yet been implemented")
		}),
		PostContactNoteHandler: PostContactNoteHandlerFunc(func(params PostContactNoteParams) middleware.Responder {
			return middleware.NotImplemented("operation PostContactNote has not yet been implemented")
		}),
		PostContactTagHandler: PostContactTagHandlerFunc(func(params PostContactTagParams) middleware.Responder {
			return middleware.NotImplemented("operation PostContactTag has not yet been implemented")
		}),
		SearchUserContactHandler: SearchUserContactHandlerFunc(func(params SearchUserContactParams) middleware.Responder {
			return middleware.NotImplemented("operation SearchUserContact has not yet been implemented")
		}),
		UpdateContactCategoryHandler: UpdateContactCategoryHandlerFunc(func(params UpdateContactCategoryParams) middleware.Responder {
			return middleware.NotImplemented("operation UpdateContactCategory has not yet been implemented")
		}),
		UpdateUserHandler: UpdateUserHandlerFunc(func(params UpdateUserParams) middleware.Responder {
			return middleware.NotImplemented("operation UpdateUser has not yet been implemented")
		}),
		UpdateUserContactHandler: UpdateUserContactHandlerFunc(func(params UpdateUserContactParams) middleware.Responder {
			return middleware.NotImplemented("operation UpdateUserContact has not yet been implemented")
		}),
		UploadContactsCsvHandler: UploadContactsCsvHandlerFunc(func(params UploadContactsCsvParams) middleware.Responder {
			return middleware.NotImplemented("operation UploadContactsCsv has not yet been implemented")
		}),
	}
}

/*ContactsAPI contact karma service */
type ContactsAPI struct {
	spec            *loads.Document
	context         *middleware.Context
	handlers        map[string]map[string]http.Handler
	formats         strfmt.Registry
	customConsumers map[string]runtime.Consumer
	customProducers map[string]runtime.Producer
	defaultConsumes string
	defaultProduces string
	Middleware      func(middleware.Builder) http.Handler
	useSwaggerUI    bool

	// BasicAuthenticator generates a runtime.Authenticator from the supplied basic auth function.
	// It has a default implementation in the security package, however you can replace it for your particular usage.
	BasicAuthenticator func(security.UserPassAuthentication) runtime.Authenticator

	// APIKeyAuthenticator generates a runtime.Authenticator from the supplied token auth function.
	// It has a default implementation in the security package, however you can replace it for your particular usage.
	APIKeyAuthenticator func(string, string, security.TokenAuthentication) runtime.Authenticator

	// BearerAuthenticator generates a runtime.Authenticator from the supplied bearer token auth function.
	// It has a default implementation in the security package, however you can replace it for your particular usage.
	BearerAuthenticator func(string, security.ScopedTokenAuthentication) runtime.Authenticator

	// JSONConsumer registers a consumer for the following mime types:
	//   - application/json
	JSONConsumer runtime.Consumer
	// MultipartformConsumer registers a consumer for the following mime types:
	//   - multipart/form-data
	MultipartformConsumer runtime.Consumer

	// JSONProducer registers a producer for the following mime types:
	//   - application/json
	JSONProducer runtime.Producer

	// ApplyLinkSuggestionHandler sets the operation handler for the apply link suggestion operation
	ApplyLinkSuggestionHandler ApplyLinkSuggestionHandler
	// CreateUserHandler sets the operation handler for the create user operation
	CreateUserHandler CreateUserHandler
	// CreateUserContactHandler sets the operation handler for the create user contact operation
	CreateUserContactHandler CreateUserContactHandler
	// DeleteContactNoteHandler sets the operation handler for the delete contact note operation
	DeleteContactNoteHandler DeleteContactNoteHandler
	// DeleteContactSourceHandler sets the operation handler for the delete contact source operation
	DeleteContactSourceHandler DeleteContactSourceHandler
	// DeleteContactTagHandler sets the operation handler for the delete contact tag operation
	DeleteContactTagHandler DeleteContactTagHandler
	// DeleteUserHandler sets the operation handler for the delete user operation
	DeleteUserHandler DeleteUserHandler
	// DeleteUserContactHandler sets the operation handler for the delete user contact operation
	DeleteUserContactHandler DeleteUserContactHandler
	// GetContactNotesHandler sets the operation handler for the get contact notes operation
	GetContactNotesHandler GetContactNotesHandler
	// GetContactSourcesHandler sets the operation handler for the get contact sources operation
	GetContactSourcesHandler GetContactSourcesHandler
	// GetContactTagsHandler sets the operation handler for the get contact tags operation
	GetContactTagsHandler GetContactTagsHandler
	// GetLinkSuggestionsHandler sets the operation handler for the get link suggestions operation
	GetLinkSuggestionsHandler GetLinkSuggestionsHandler
	// GetPendingFollowUpsHandler sets the operation handler for the get pending follow ups operation
	GetPendingFollowUpsHandler GetPendingFollowUpsHandler
	// GetRecentContactsHandler sets the operation handler for the get recent contacts operation
	GetRecentContactsHandler GetRecentContactsHandler
	// GetUnifiedContactsHandler sets the operation handler for the get unified contacts operation
	GetUnifiedContactsHandler GetUnifiedContactsHandler
	// GetUserHandler sets the operation handler for the get user operation
	GetUserHandler GetUserHandler
	// GetUserContactByIDHandler sets the operation handler for the get user contact by id operation
	GetUserContactByIDHandler GetUserContactByIDHandler
	// InitGoogleContactSourceHandler sets the operation handler for the init google contact source operation
	InitGoogleContactSourceHandler InitGoogleContactSourceHandler
	// LinkGoogleContactSourceHandler sets the operation handler for the link google contact source operation
	LinkGoogleContactSourceHandler LinkGoogleContactSourceHandler
	// PatchContactNoteHandler sets the operation handler for the patch contact note operation
	PatchContactNoteHandler PatchContactNoteHandler
	// PatchContactTagHandler sets the operation handler for the patch contact tag operation
	PatchContactTagHandler PatchContactTagHandler
	// PostContactNoteHandler sets the operation handler for the post contact note operation
	PostContactNoteHandler PostContactNoteHandler
	// PostContactTagHandler sets the operation handler for the post contact tag operation
	PostContactTagHandler PostContactTagHandler
	// SearchUserContactHandler sets the operation handler for the search user contact operation
	SearchUserContactHandler SearchUserContactHandler
	// UpdateContactCategoryHandler sets the operation handler for the update contact category operation
	UpdateContactCategoryHandler UpdateContactCategoryHandler
	// UpdateUserHandler sets the operation handler for the update user operation
	UpdateUserHandler UpdateUserHandler
	// UpdateUserContactHandler sets the operation handler for the update user contact operation
	UpdateUserContactHandler UpdateUserContactHandler
	// UploadContactsCsvHandler sets the operation handler for the upload contacts csv operation
	UploadContactsCsvHandler UploadContactsCsvHandler

	// ServeError is called when an error is received, there is a default handler
	// but you can set your own with this
	ServeError func(http.ResponseWriter, *http.Request, error)

	// PreServerShutdown is called before the HTTP(S) server is shutdown
	// This allows for custom functions to get executed before the HTTP(S) server stops accepting traffic
	PreServerShutdown func()

	// ServerShutdown is called when the HTTP(S) server is shut down and done
	// handling all active connections and does not accept connections any more
	ServerShutdown func()

	// Custom command line argument groups with their descriptions
	CommandLineOptionsGroups []swag.CommandLineOptionsGroup

	// User defined logger function.
	Logger func(string, ...interface{})
}

// UseRedoc for documentation at /docs
func (o *ContactsAPI) UseRedoc() {
	o.useSwaggerUI = false
}

// UseSwaggerUI for documentation at /docs
func (o *ContactsAPI) UseSwaggerUI() {
	o.useSwaggerUI = true
}

// SetDefaultProduces sets the default produces media type
func (o *ContactsAPI) SetDefaultProduces(mediaType string) {
	o.defaultProduces = mediaType
}

// SetDefaultConsumes returns the default consumes media type
func (o *ContactsAPI) SetDefaultConsumes(mediaType string) {
	o.defaultConsumes = mediaType
}

// SetSpec sets a spec that will be served for the clients.
func (o *ContactsAPI) SetSpec(spec *loads.Document) {
	o.spec = spec
}

// DefaultProduces returns the default produces media type
func (o *ContactsAPI) DefaultProduces() string {
	return o.defaultProduces
}

// DefaultConsumes returns the default consumes media type
func (o *ContactsAPI) DefaultConsumes() string {
	return o.defaultConsumes
}

// Formats returns the registered string formats
func (o *ContactsAPI) Formats() strfmt.Registry {
	return o.formats
}

// RegisterFormat registers a custom format validator
func (o *ContactsAPI) RegisterFormat(name string, format strfmt.Format, validator strfmt.Validator) {
	o.formats.Add(name, format, validator)
}

// Validate validates the registrations in the ContactsAPI
func (o *ContactsAPI) Validate() error {
	var unregistered []string

	if o.JSONConsumer == nil {
		unregistered = append(unregistered, "JSONConsumer")
	}
	if o.MultipartformConsumer == nil {
		unregistered = append(unregistered, "MultipartformConsumer")
	}

	if o.JSONProducer == nil {
		unregistered = append(unregistered, "JSONProducer")
	}

	if o.ApplyLinkSuggestionHandler == nil {
		unregistered = append(unregistered, "ApplyLinkSuggestionHandler")
	}
	if o.CreateUserHandler == nil {
		unregistered = append(unregistered, "CreateUserHandler")
	}
	if o.CreateUserContactHandler == nil {
		unregistered = append(unregistered, "CreateUserContactHandler")
	}
	if o.DeleteContactNoteHandler == nil {
		unregistered = append(unregistered, "DeleteContactNoteHandler")
	}
	if o.DeleteContactSourceHandler == nil {
		unregistered = append(unregistered, "DeleteContactSourceHandler")
	}
	if o.DeleteContactTagHandler == nil {
		unregistered = append(unregistered, "DeleteContactTagHandler")
	}
	if o.DeleteUserHandler == nil {
		unregistered = append(unregistered, "DeleteUserHandler")
	}
	if o.DeleteUserContactHandler == nil {
		unregistered = append(unregistered, "DeleteUserContactHandler")
	}
	if o.GetContactNotesHandler == nil {
		unregistered = append(unregistered, "GetContactNotesHandler")
	}
	if o.GetContactSourcesHandler == nil {
		unregistered = append(unregistered, "GetContactSourcesHandler")
	}
	if o.GetContactTagsHandler == nil {
		unregistered = append(unregistered, "GetContactTagsHandler")
	}
	if o.GetLinkSuggestionsHandler == nil {
		unregistered = append(unregistered, "GetLinkSuggestionsHandler")
	}
	if o.GetPendingFollowUpsHandler == nil {
		unregistered = append(unregistered, "GetPendingFollowUpsHandler")
	}
	if o.GetRecentContactsHandler == nil {
		unregistered = append(unregistered, "GetRecentContactsHandler")
	}
	if o.GetUnifiedContactsHandler == nil {
		unregistered = append(unregistered, "GetUnifiedContactsHandler")
	}
	if o.GetUserHandler == nil {
		unregistered = append(unregistered, "GetUserHandler")
	}
	if o.GetUserContactByIDHandler == nil {
		unregistered = append(unregistered, "GetUserContactByIDHandler")
	}
	if o.InitGoogleContactSourceHandler == nil {
		unregistered = append(unregistered, "InitGoogleContactSourceHandler")
	}
	if o.LinkGoogleContactSourceHandler == nil {
		unregistered = append(unregistered, "LinkGoogleContactSourceHandler")
	}
	if o.PatchContactNoteHandler == nil {
		unregistered = append(unregistered, "PatchContactNoteHandler")
	}
	if o.PatchContactTagHandler == nil {
		unregistered = append(unregistered, "PatchContactTagHandler")
	}
	if o.PostContactNoteHandler == nil {
		unregistered = append(unregistered, "PostContactNoteHandler")
	}
	if o.PostContactTagHandler == nil {
		unregistered = append(unregistered, "PostContactTagHandler")
	}
	if o.SearchUserContactHandler == nil {
		unregistered = append(unregistered, "SearchUserContactHandler")
	}
	if o.UpdateContactCategoryHandler == nil {
		unregistered = append(unregistered, "UpdateContactCategoryHandler")
	}
	if o.UpdateUserHandler == nil {
		unregistered = append(unregistered, "UpdateUserHandler")
	}
	if o.UpdateUserContactHandler == nil {
		unregistered = append(unregistered, "UpdateUserContactHandler")
	}
	if o.UploadContactsCsvHandler == nil {
		unregistered = append(unregistered, "UploadContactsCsvHandler")
	}

	if len(unregistered) > 0 {
		return fmt.Errorf("missing registration: %s", strings.Join(unregistered, ", "))
	}

	return nil
}

// ServeErrorFor gets a error handler for a given operation id
func (o *ContactsAPI) ServeErrorFor(operationID string) func(http.ResponseWriter, *http.Request, error) {
	return o.ServeError
}

// AuthenticatorsFor gets the authenticators for the specified security schemes
func (o *ContactsAPI) AuthenticatorsFor(schemes map[string]spec.SecurityScheme) map[string]runtime.Authenticator {
	return nil
}

// Authorizer returns the registered authorizer
func (o *ContactsAPI) Authorizer() runtime.Authorizer {
	return nil
}

// ConsumersFor gets the consumers for the specified media types.
// MIME type parameters are ignored here.
func (o *ContactsAPI) ConsumersFor(mediaTypes []string) map[string]runtime.Consumer {
	result := make(map[string]runtime.Consumer, len(mediaTypes))
	for _, mt := range mediaTypes {
		switch mt {
		case "application/json":
			result["application/json"] = o.JSONConsumer
		case "multipart/form-data":
			result["multipart/form-data"] = o.MultipartformConsumer
		}

		if c, ok := o.customConsumers[mt]; ok {
			result[mt] = c
		}
	}
	return result
}

// ProducersFor gets the producers for the specified media types.
// MIME type parameters are ignored here.
func (o *ContactsAPI) ProducersFor(mediaTypes []string) map[string]runtime.Producer {
	result := make(map[string]runtime.Producer, len(mediaTypes))
	for _, mt := range mediaTypes {
		switch mt {
		case "application/json":
			result["application/json"] = o.JSONProducer
		}

		if p, ok := o.customProducers[mt]; ok {
			result[mt] = p
		}
	}
	return result
}

// HandlerFor gets a http.Handler for the provided operation method and path
func (o *ContactsAPI) HandlerFor(method, path string) (http.Handler, bool) {
	if o.handlers == nil {
		return nil, false
	}
	um := strings.ToUpper(method)
	if _, ok := o.handlers[um]; !ok {
		return nil, false
	}
	if path == "/" {
		path = ""
	}
	h, ok := o.handlers[um][path]
	return h, ok
}

// Context returns the middleware context for the contacts API
func (o *ContactsAPI) Context() *middleware.Context {
	if o.context == nil {
		o.context = middleware.NewRoutableContext(o.spec, o, nil)
	}

	return o.context
}

func (o *ContactsAPI) initHandlerCache() {
	o.Context() // don't care about the result, just that the initialization happened
	if o.handlers == nil {
		o.handlers = make(map[string]map[string]http.Handler)
	}

	if o.handlers["POST"] == nil {
		o.handlers["POST"] = make(map[string]http.Handler)
	}
	o.handlers["POST"]["/suggestions/{suggestion_id}/apply"] = NewApplyLinkSuggestion(o.context, o.ApplyLinkSuggestionHandler)
	if o.handlers["POST"] == nil {
		o.handlers["POST"] = make(map[string]http.Handler)
	}
	o.handlers["POST"]["/users"] = NewCreateUser(o.context, o.CreateUserHandler)
	if o.handlers["POST"] == nil {
		o.handlers["POST"] = make(map[string]http.Handler)
	}
	o.handlers["POST"]["/unified"] = NewCreateUserContact(o.context, o.CreateUserContactHandler)
	if o.handlers["DELETE"] == nil {
		o.handlers["DELETE"] = make(map[string]http.Handler)
	}
	o.handlers["DELETE"]["/unified/{unified_id}/notes/{note_id}"] = NewDeleteContactNote(o.context, o.DeleteContactNoteHandler)
	if o.handlers["DELETE"] == nil {
		o.handlers["DELETE"] = make(map[string]http.Handler)
	}
	o.handlers["DELETE"]["/contacts/sources/{source_id}"] = NewDeleteContactSource(o.context, o.DeleteContactSourceHandler)
	if o.handlers["DELETE"] == nil {
		o.handlers["DELETE"] = make(map[string]http.Handler)
	}
	o.handlers["DELETE"]["/unified/{unified_id}/tags/{tag_id}"] = NewDeleteContactTag(o.context, o.DeleteContactTagHandler)
	if o.handlers["DELETE"] == nil {
		o.handlers["DELETE"] = make(map[string]http.Handler)
	}
	o.handlers["DELETE"]["/users/{user_id}"] = NewDeleteUser(o.context, o.DeleteUserHandler)
	if o.handlers["DELETE"] == nil {
		o.handlers["DELETE"] = make(map[string]http.Handler)
	}
	o.handlers["DELETE"]["/unified/{unified_id}"] = NewDeleteUserContact(o.context, o.DeleteUserContactHandler)
	if o.handlers["GET"] == nil {
		o.handlers["GET"] = make(map[string]http.Handler)
	}
	o.handlers["GET"]["/unified/{unified_id}/notes"] = NewGetContactNotes(o.context, o.GetContactNotesHandler)
	if o.handlers["GET"] == nil {
		o.handlers["GET"] = make(map[string]http.Handler)
	}
	o.handlers["GET"]["/contacts/sources"] = NewGetContactSources(o.context, o.GetContactSourcesHandler)
	if o.handlers["GET"] == nil {
		o.handlers["GET"] = make(map[string]http.Handler)
	}
	o.handlers["GET"]["/unified/{unified_id}/tags"] = NewGetContactTags(o.context, o.GetContactTagsHandler)
	if o.handlers["GET"] == nil {
		o.handlers["GET"] = make(map[string]http.Handler)
	}
	o.handlers["GET"]["/suggestions"] = NewGetLinkSuggestions(o.context, o.GetLinkSuggestionsHandler)
	if o.handlers["GET"] == nil {
		o.handlers["GET"] = make(map[string]http.Handler)
	}
	o.handlers["GET"]["/pending"] = NewGetPendingFollowUps(o.context, o.GetPendingFollowUpsHandler)
	if o.handlers["GET"] == nil {
		o.handlers["GET"] = make(map[string]http.Handler)
	}
	o.handlers["GET"]["/recent"] = NewGetRecentContacts(o.context, o.GetRecentContactsHandler)
	if o.handlers["GET"] == nil {
		o.handlers["GET"] = make(map[string]http.Handler)
	}
	o.handlers["GET"]["/unified"] = NewGetUnifiedContacts(o.context, o.GetUnifiedContactsHandler)
	if o.handlers["GET"] == nil {
		o.handlers["GET"] = make(map[string]http.Handler)
	}
	o.handlers["GET"]["/users/{user_id}"] = NewGetUser(o.context, o.GetUserHandler)
	if o.handlers["GET"] == nil {
		o.handlers["GET"] = make(map[string]http.Handler)
	}
	o.handlers["GET"]["/unified/{unified_id}"] = NewGetUserContactByID(o.context, o.GetUserContactByIDHandler)
	if o.handlers["GET"] == nil {
		o.handlers["GET"] = make(map[string]http.Handler)
	}
	o.handlers["GET"]["/contacts/sources/google/init"] = NewInitGoogleContactSource(o.context, o.InitGoogleContactSourceHandler)
	if o.handlers["POST"] == nil {
		o.handlers["POST"] = make(map[string]http.Handler)
	}
	o.handlers["POST"]["/contacts/sources/google/link"] = NewLinkGoogleContactSource(o.context, o.LinkGoogleContactSourceHandler)
	if o.handlers["PATCH"] == nil {
		o.handlers["PATCH"] = make(map[string]http.Handler)
	}
	o.handlers["PATCH"]["/unified/{unified_id}/notes/{note_id}"] = NewPatchContactNote(o.context, o.PatchContactNoteHandler)
	if o.handlers["PATCH"] == nil {
		o.handlers["PATCH"] = make(map[string]http.Handler)
	}
	o.handlers["PATCH"]["/unified/{unified_id}/tags/{tag_id}"] = NewPatchContactTag(o.context, o.PatchContactTagHandler)
	if o.handlers["POST"] == nil {
		o.handlers["POST"] = make(map[string]http.Handler)
	}
	o.handlers["POST"]["/unified/{unified_id}/notes"] = NewPostContactNote(o.context, o.PostContactNoteHandler)
	if o.handlers["POST"] == nil {
		o.handlers["POST"] = make(map[string]http.Handler)
	}
	o.handlers["POST"]["/unified/{unified_id}/tags"] = NewPostContactTag(o.context, o.PostContactTagHandler)
	if o.handlers["POST"] == nil {
		o.handlers["POST"] = make(map[string]http.Handler)
	}
	o.handlers["POST"]["/search"] = NewSearchUserContact(o.context, o.SearchUserContactHandler)
	if o.handlers["PATCH"] == nil {
		o.handlers["PATCH"] = make(map[string]http.Handler)
	}
	o.handlers["PATCH"]["/unified/{unified_id}/category"] = NewUpdateContactCategory(o.context, o.UpdateContactCategoryHandler)
	if o.handlers["PATCH"] == nil {
		o.handlers["PATCH"] = make(map[string]http.Handler)
	}
	o.handlers["PATCH"]["/users"] = NewUpdateUser(o.context, o.UpdateUserHandler)
	if o.handlers["PATCH"] == nil {
		o.handlers["PATCH"] = make(map[string]http.Handler)
	}
	o.handlers["PATCH"]["/unified/{unified_id}"] = NewUpdateUserContact(o.context, o.UpdateUserContactHandler)
	if o.handlers["POST"] == nil {
		o.handlers["POST"] = make(map[string]http.Handler)
	}
	o.handlers["POST"]["/contacts/upload-csv"] = NewUploadContactsCsv(o.context, o.UploadContactsCsvHandler)
}

// Serve creates a http handler to serve the API over HTTP
// can be used directly in http.ListenAndServe(":8000", api.Serve(nil))
func (o *ContactsAPI) Serve(builder middleware.Builder) http.Handler {
	o.Init()

	if o.Middleware != nil {
		return o.Middleware(builder)
	}
	if o.useSwaggerUI {
		return o.context.APIHandlerSwaggerUI(builder)
	}
	return o.context.APIHandler(builder)
}

// Init allows you to just initialize the handler cache, you can then recompose the middleware as you see fit
func (o *ContactsAPI) Init() {
	if len(o.handlers) == 0 {
		o.initHandlerCache()
	}
}

// RegisterConsumer allows you to add (or override) a consumer for a media type.
func (o *ContactsAPI) RegisterConsumer(mediaType string, consumer runtime.Consumer) {
	o.customConsumers[mediaType] = consumer
}

// RegisterProducer allows you to add (or override) a producer for a media type.
func (o *ContactsAPI) RegisterProducer(mediaType string, producer runtime.Producer) {
	o.customProducers[mediaType] = producer
}

// AddMiddlewareFor adds a http middleware to existing handler
func (o *ContactsAPI) AddMiddlewareFor(method, path string, builder middleware.Builder) {
	um := strings.ToUpper(method)
	if path == "/" {
		path = ""
	}
	o.Init()
	if h, ok := o.handlers[um][path]; ok {
		o.handlers[method][path] = builder(h)
	}
}
