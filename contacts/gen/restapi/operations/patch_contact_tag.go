// Code generated by go-swagger; DO NOT EDIT.

package operations

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the generate command

import (
	"net/http"

	"github.com/go-openapi/runtime/middleware"
)

// PatchContactTagHandlerFunc turns a function with the right signature into a patch contact tag handler
type PatchContactTagHandlerFunc func(PatchContactTagParams) middleware.Responder

// Handle executing the request and returning a response
func (fn PatchContactTagHandlerFunc) Handle(params PatchContactTagParams) middleware.Responder {
	return fn(params)
}

// PatchContactTagHandler interface for that can handle valid patch contact tag params
type PatchContactTagHandler interface {
	Handle(PatchContactTagParams) middleware.Responder
}

// NewPatchContactTag creates a new http.Handler for the patch contact tag operation
func NewPatchContactTag(ctx *middleware.Context, handler PatchContactTagHandler) *PatchContactTag {
	return &PatchContactTag{Context: ctx, Handler: handler}
}

/* PatchContactTag swagger:route PATCH /unified/{unified_id}/tags/{tag_id} patchContactTag

patch contact tag

*/
type PatchContactTag struct {
	Context *middleware.Context
	Handler PatchContactTagHandler
}

func (o *PatchContactTag) ServeHTTP(rw http.ResponseWriter, r *http.Request) {
	route, rCtx, _ := o.Context.RouteInfo(r)
	if rCtx != nil {
		*r = *rCtx
	}
	var Params = NewPatchContactTagParams()
	if err := o.Context.BindValidRequest(r, route, &Params); err != nil { // bind params
		o.Context.Respond(rw, r, route.Produces, route, err)
		return
	}

	res := o.Handler.Handle(Params) // actually handle the request
	o.Context.Respond(rw, r, route.Produces, route, res)

}
