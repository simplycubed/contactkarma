// Code generated by go-swagger; DO NOT EDIT.

package operations

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"net/http"

	"github.com/go-openapi/runtime"

	"github.com/simplycubed/contactkarma/contacts/gen-jobs/models"
)

// ContactSourceCleanUpOKCode is the HTTP code returned for type ContactSourceCleanUpOK
const ContactSourceCleanUpOKCode int = 200

/*ContactSourceCleanUpOK Triggered

swagger:response contactSourceCleanUpOK
*/
type ContactSourceCleanUpOK struct {

	/*
	  In: Body
	*/
	Payload *models.JobSuccess `json:"body,omitempty"`
}

// NewContactSourceCleanUpOK creates ContactSourceCleanUpOK with default headers values
func NewContactSourceCleanUpOK() *ContactSourceCleanUpOK {

	return &ContactSourceCleanUpOK{}
}

// WithPayload adds the payload to the contact source clean up o k response
func (o *ContactSourceCleanUpOK) WithPayload(payload *models.JobSuccess) *ContactSourceCleanUpOK {
	o.Payload = payload
	return o
}

// SetPayload sets the payload to the contact source clean up o k response
func (o *ContactSourceCleanUpOK) SetPayload(payload *models.JobSuccess) {
	o.Payload = payload
}

// WriteResponse to the client
func (o *ContactSourceCleanUpOK) WriteResponse(rw http.ResponseWriter, producer runtime.Producer) {

	rw.WriteHeader(200)
	if o.Payload != nil {
		payload := o.Payload
		if err := producer.Produce(rw, payload); err != nil {
			panic(err) // let the recovery middleware deal with this
		}
	}
}

// ContactSourceCleanUpBadRequestCode is the HTTP code returned for type ContactSourceCleanUpBadRequest
const ContactSourceCleanUpBadRequestCode int = 400

/*ContactSourceCleanUpBadRequest Error

swagger:response contactSourceCleanUpBadRequest
*/
type ContactSourceCleanUpBadRequest struct {

	/*
	  In: Body
	*/
	Payload *models.JobError `json:"body,omitempty"`
}

// NewContactSourceCleanUpBadRequest creates ContactSourceCleanUpBadRequest with default headers values
func NewContactSourceCleanUpBadRequest() *ContactSourceCleanUpBadRequest {

	return &ContactSourceCleanUpBadRequest{}
}

// WithPayload adds the payload to the contact source clean up bad request response
func (o *ContactSourceCleanUpBadRequest) WithPayload(payload *models.JobError) *ContactSourceCleanUpBadRequest {
	o.Payload = payload
	return o
}

// SetPayload sets the payload to the contact source clean up bad request response
func (o *ContactSourceCleanUpBadRequest) SetPayload(payload *models.JobError) {
	o.Payload = payload
}

// WriteResponse to the client
func (o *ContactSourceCleanUpBadRequest) WriteResponse(rw http.ResponseWriter, producer runtime.Producer) {

	rw.WriteHeader(400)
	if o.Payload != nil {
		payload := o.Payload
		if err := producer.Produce(rw, payload); err != nil {
			panic(err) // let the recovery middleware deal with this
		}
	}
}
